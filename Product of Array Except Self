Product of Array Except Self
Medium

5609

456

Add to List

Share
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

----------

class Solution {
    // public int[] productExceptSelf(int[] nums) {
    //     int prod=1;
    //     for(int i=0;i<nums.length;i++)
    //     {   
    //         prod=prod*nums[i];
    //     }
    //     int[] a=new int[nums.length];
    //     if(prod==0)
    //     {
    //        for(int i=0;i<nums.length;i++)
    //        {   
    //         a[i]=0;
    //        } 
    //         return a;
    //     }
    //     for(int i=0;i<nums.length;i++)
    //     {   int temp=prod;
    //         a[i]=temp/nums[i];
    //     }
    //     return a;
    // }
    
    public int[] productExceptSelf(int[] nums) {
        int n=nums.length;
        int[] left=new int[n];
        int[] right=new int[n];
        int[] a=new int[n];
        
        left[0]=1;
        right[n-1]=1;
        
        for(int i=1;i<n;i++)
        {
            left[i]=nums[i-1]*left[i-1];
        }
        
        for( int k=n-2;k>=0;k--)
        {
            right[k]=right[k+1]*nums[k+1];
        }
        for(int j=0;j<n;j++)
        {
            a[j]=left[j]*right[j];
        }
        
        return a;
    }
}

-----

Runtime: 1 ms, faster than 100.00% of Java online submissions for Product of Array Except Self.
Memory Usage: 47.7 MB, less than 90.23% of Java online submissions for Product of Array Except Self.
Next challenges:
Trapping Rain Water
Paint House II
