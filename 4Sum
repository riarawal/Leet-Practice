4Sum
Medium

1963

326

Add to List

Share
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

---------

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
        List<List<Integer>> out=new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length-3;i++)
        {   if(i!=0 && nums[i]==nums[i-1])
            {
              continue;
            }
         for(int j=i+1;j<nums.length-2;j++)
         { 
            //int j=i+1;
            
           if(j!=i+1 && nums[j]==nums[j-1])
            {
              continue;
            }
            int k=j+1;
            int l=nums.length-1;
            while(k<l)
            {    if(nums[i]+nums[j]+nums[k]+nums[l]<target)
                {
                k++;
                }
                
                else if(nums[i]+nums[j]+nums[k]+nums[l]>target)
                {
                    l--;
                }
               
                else
                {   List<Integer> in=new ArrayList<Integer>();
                    in.add(nums[i]);
                    in.add(nums[j]);
                    in.add(nums[l]);
                    in.add(nums[k]);
                    out.add(in);
                    l--; //loop ke lie
                    k++;
                    
                    while(k<l && nums[l]==nums[l+1])
                    {
                        l--;//repetition rokne ke lie
                    }
                     while(k<l && nums[k]==nums[k-1])
                    {
                        k++;
                    }
                }
            
            }
         }
            
        }
       return out;     
    }
}
